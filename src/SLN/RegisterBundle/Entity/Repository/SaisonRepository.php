<?php

namespace SLN\RegisterBundle\Entity\Repository;

use Doctrine\ORM\EntityRepository;

use SLN\RegisterBundle\Entity\Saison;

/**
 * SaisonRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class SaisonRepository extends EntityRepository
{
    /**
     * Return given saison, or open saison if index is 0
     */
    public function findOrOpen($id) {
        return $id == 0 ? $this->getOpen() : $this->find($id);
    }

    /**
     * Return given saison, or current saison if index is 0
     */
    public function findOrCurrent($id) {
        return $id == 0 ? $this->getCurrent() : $this->find($id);
    }

    /**
     * Returns all the saisons
     *
     * @return Saison[] list of saisons
     */
    public function findAll() {
        $qb = $this->createQueryBuilder('s')
                   ->select('s')
                   ->addOrderBy('s.id', 'ASC');

        return $qb->getQuery()
                  ->getResult();
    }

    /**
     * Return current saison
     *
     * This is the saison for which starting date is before current date, but
     * with the maximum value.
     */
    public function getCurrent() {
        $qb = $this->createQueryBuilder('s')
                   ->select('s')
                   ->where('DATE_DIFF(s.start, CURRENT_DATE()) < 0')
                   ->addOrderBy('s.start', 'DESC');

        $results =  $qb->getQuery()->getResult();
        return count($results) > 0 ? $results[0] : NULL;
    }


    /* 
     * Return the last open saison for inscription
     */
    public function getOpen() {
        $qb = $this->createQueryBuilder('s')
                   ->select('s')
                   ->where('s.activated=1')
                   ->addOrderBy('s.start', 'DESC');

        $results =  $qb->getQuery()->getResult();
        return count($results) > 0 ? $results[0] : NULL;
    }

    /**
     * Return saison before the open saison, NULL if no open saison
     */
    public function getBeforeOpen() {
        $qb = $this->createQueryBuilder('s')
                   ->select('s')
                   ->addOrderBy('s.start', 'DESC');

        $results =  $qb->getQuery()->getResult();
        $to_return = FALSE;
        foreach ($results as $result) {
            if ($to_return) return $result;
            else $to_return = $result->getActivated();
        }
        return NULL;
    }

    /*
     * Return previous saisons
     */
    public function getOldSaisons() {
      $qb = $this->createQueryBuilder('s')
                 ->select('s')
                 ->where('s.activated=0');

      $current = $this->getCurrent();
      if ($current) {
        $qb->andWhere('s.id != :id')
           ->setParameter('id', $current->getId());
      }

      return $qb->getQuery()->getResult();
    }
}
